{
  "name": "jquery-file-upload-middleware",
  "author": {
    "name": "Aleksandr Guidrevitch",
    "email": "aguidrevitch@gmail.com"
  },
  "description": "jQuery-File-Upload Express.js Middleware",
  "keywords": [
    "jquery",
    "upload",
    "express",
    "middleware"
  ],
  "version": "0.0.8",
  "dependencies": {
    "formidable": ">=1.0.11",
    "imagemagick": ">=0.1.2",
    "lodash": ">= 0.9.2",
    "mkdirp": ">= 0.3.4"
  },
  "engines": {
    "node": ">= 0.8.8"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/aguidrevitch/jquery-file-upload-middleware.git"
  },
  "main": "./index.js",
  "readmeFilename": "README.md",
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "_id": "jquery-file-upload-middleware@0.0.8",
  "license": "MIT",
  "readme": "jquery-file-upload-middleware\n=============================\n\njQuery-File-Upload Express.js middleware. Based on the server code of [jQuery-File-Upload](https://github.com/blueimp/jQuery-File-Upload)\n\nInstallation:\n\n```\n    $ npm install jquery-file-upload-middleware\n```\n\nUsage:\n\n```javascript\n    var express = require(\"express\"),\n        upload = require('jquery-file-upload-middleware');\n\n    var app = express();\n\n    // configure upload middleware\n    upload.configure({\n        uploadDir: __dirname + '/public/uploads',\n        uploadUrl: '/uploads',\n        imageVersions: {\n            thumbnail: {\n                width: 80,\n                height: 80\n            }\n        }\n    });\n\n    app.configure(function () {\n        ...\n        app.use('/upload', upload.fileHandler());\n        app.use(express.bodyParser());\n        ...\n    });\n\n```\n\nOn the frontend:\n\n```html\n   <input id=\"fileupload\" type=\"file\" name=\"files[]\" data-url=\"/upload\" multiple>\n   <script>$('#fileupload').fileupload({ dataType: 'json' })</script>\n```\n\nOverriding global configuration\n\n```javascript\n\n    app.use('/upload2', upload.fileHandler({\n        uploadDir: __dirname + '/public/uploads2',\n        uploadUrl: '/uploads2',\n        imageVersions: {\n            thumbnail: {\n                width: 100,\n                height: 100\n            }\n        }\n    }));\n\n```\n\nMore sophisticated example - Events\n\n```javascript\n        app.use('/upload', upload.fileHandler());\n\n        // events\n        upload.on('begin', function (fileInfo) { \n            // fileInfo structure is the same as returned to browser\n            // { \n            //     name: '3 (3).jpg',\n            //     originalName: '3.jpg',\n            //     size: 79262,\n            //     type: 'image/jpeg',\n            //     delete_type: 'DELETE',\n            //     delete_url: 'http://yourhost/upload/3%20(3).jpg',\n            //     url: 'http://yourhost/uploads/3%20(3).jpg',\n            //     thumbnail_url: 'http://youhost/uploads/thumbnail/3%20(3).jpg' \n            // }\n        });\n        upload.on('abort', function (fileInfo) { ... });\n        upload.on('end', function (fileInfo) { ... });\n        upload.on('delete', function (fileInfo) { ... });\n        upload.on('error', function (e) {\n            console.log(e.message);\n        });\n```\n\nDynamic upload directory and url, isolating user files:\n\n```javascript\n        upload.configure({\n            imageVersions: {\n                thumbnail: {\n                    width: 80,\n                    height: 80\n                }\n            }\n        });\n\n        app.use('/upload', function (req, res, next) {\n            // imageVersions are taken from upload.configure()\n            upload.fileHandler({\n                uploadDir: function () {\n                    return __dirname + '/public/uploads/' + req.sessionID\n                },\n                uploadUrl: function () {\n                    return '/uploads/' + req.sessionID\n                }\n            })(req, res, next);\n        });\n```\n\nMoving uploaded files to different dir:\n\n```javascript\n        app.use('/api', function (req, res, next) {\n            req.filemanager = upload.fileManager();\n            next();\n        });\n\n        app.use('/api/endpoint', function (req, res, next) {\n            // your real /api handler that will actually move the file\n            ...\n            // req.filemanager.move(filename, path, function (err, result))\n            req.filemanager.move('SomeFile.jpg', 'project1', function (err, result) {\n                // SomeFile.jpg gets moved from uploadDir/SomeFile.jpg to\n                // uploadDir/project1/SomeFile.jpg\n                // if path is relative (no leading slash), uploadUrl will\n                // be used to generate relevant urls,\n                // for absolute paths urls are not generated\n                if (!err) {\n                    // result structure\n                    // {\n                    //     filename: 'SomeFile.jpg',\n                    //     url: '/uploads/project1/SomeFile.jpg',\n                    //     thumbail_url : '/uploads/project1/thumbnail/SomeFile.jpg'\n                    // }\n                    ...\n                } else {\n                    console.log(err);\n                }\n            });\n        });\n```\n\nMoving uploaded files out of uploadDir:\n\n```\n        app.use('/api', function (req, res, next) {\n            var user = db.find(...);\n\n            req.filemanager = upload.fileManager({\n                targetDir: __dirname + '/public/u/' + user._id,\n                targetUrl: '/u/' + user._id,\n            });\n\n            // or\n            req.filemanager = upload.fileManager({\n                targetDir: function () {\n                    return __dirname + '/public/u/' + user._id\n                },\n                targetUrl: function () {\n                    return'/u/' + user._id\n                }\n            });\n            ...\n            req.filemanager.move(req.body.filename, 'profile', function (err, result) {\n                // file gets moved to __dirname + '/public/u/' + user._id + '/profile'\n                if (!err) {\n\n                }\n            });\n        });\n```\n\nGetting uploaded files mapped to their fs locations:\n\n```javascript\n        app.use('/list', function (req, res, next) {\n            upload.fileManager().getFiles(function (files) {\n                //  {\n                //      \"00001.MTS\": {\n                //          \"path\": \"/home/.../public/uploads/ekE6k4j9PyrGtcg+SA6a5za3/00001.MTS\"\n                //      },\n                //      \"DSC00030.JPG\": {\n                //          \"path\": \"/home/.../public/uploads/ekE6k4j9PyrGtcg+SA6a5za3/DSC00030.JPG\",\n                //          \"thumbnail\": \"/home/.../public/uploads/ekE6k4j9PyrGtcg+SA6a5za3/thumbnail/DSC00030.JPG\"\n                //      }\n                //  }\n                res.json(files);\n            });\n        });\n\n        // with dynamic upload directories\n\n        app.use('/list', function (req, res, next) {\n            upload.fileManager({\n                uploadDir: function () {\n                    return __dirname + '/public/uploads/' + req.sessionID\n                },\n                uploadUrl: function () {\n                    return '/uploads/' + req.sessionID\n                }\n            }).getFiles(function (files) {\n                res.json(files);\n            });\n        });\n```\n\nOther options and their default values:\n\n```javascript\n{\n    tmpDir: '/tmp',\n    uploadDir: __dirname + '/public/uploads',\n    uploadUrl: '/uploads',\n    targetDir: uploadDir,\n    targetUrl: uploadUrl,\n    ssl: false,\n    hostname: null, // in case your reverse proxy doesn't set Host header\n                    // eg 'google.com'\n    maxPostSize: 11000000000, // 11 GB\n    minFileSize: 1,\n    maxFileSize: 10000000000, // 10 GB\n    acceptFileTypes: /.+/i,\n    imageTypes: /\\.(gif|jpe?g|png)$/i,\n    imageVersions: {\n        thumbnail: {\n            width: 80,\n            height: 80\n        }\n    },\n    imageArgs: ['-auto-orient'],\n    accessControl: {\n        allowOrigin: '*',\n        allowMethods: 'OPTIONS, HEAD, GET, POST, PUT, DELETE'\n    }\n}\n```\n\n## License\nCopyright (c) 2012 [Aleksandr Guidrevitch](http://aguidrevitch.blogspot.com/)\nReleased under the [MIT license](http://www.opensource.org/licenses/MIT).\n",
  "bugs": {
    "url": "https://github.com/aguidrevitch/jquery-file-upload-middleware/issues"
  },
  "dist": {
    "shasum": "f53fb2bf2816cf5bc9bfed39a3334335552c7291"
  },
  "_from": "jquery-file-upload-middleware@",
  "_resolved": "https://registry.npmjs.org/jquery-file-upload-middleware/-/jquery-file-upload-middleware-0.0.8.tgz"
}
